exit
node.right.height
node.left.height
node.left.heigh
node.height
node.left.left
node.left
node
val
c
val
c
val
c
s
node
val
exit
roooot.left.left.left
roooot.left.left
roooot.right
roooot.left
roooot.right
tree.right
tree
exit
tree.root.left
tree.root.right
tree.root.val
tree.root
roooot
exit
tree.root
tree
roooot.left.left
roooot.left
roooot.right
roooot
rooot
exit
exuit
s
node
new_root
node2
s
balance_factor
s
node.left
node.right
node
s
new_root.left
new_root.right
new_root
new_root.height
node.height
s
node.left
s
new_root.left
new_root.right
new_root
s
node2
s
new_root
s
node
s
val
s
balance_factor
s
node.height
balance_facotr
node
s
val
s
balance_factor
s
node
node.height
s
height(node.right)
height(node.right
[nil, 1].max
node.left
node
node.right
s
node
s
node
s
val
s
val
node
s
node.val
val
s
val
va
node.left.left
node.left
node
c
val
node
node.left
c
node.left
c
node.left
val
node
c
val
exit
val
vla
node
c
node
val
node
c
node
c
node.left.left
node.right
node.left
val
node
c
s
node
val
c
node
c
val
cal
node
c
val
node
c
node
c
s
val
s
node
exit
node
